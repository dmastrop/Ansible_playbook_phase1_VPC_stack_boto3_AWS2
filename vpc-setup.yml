- hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import VPC Variables
      include_vars: vars/vpc_setup
      # the hierarchy is bastion_setup and vpc_setup var files are in /var directory. The files do not have to be in a separate file.
      # always preferable to use vars files so that the code (below for example) is fully reusable across different implementations
    

    - name: Create vprofile VPC task
      ec2_vpc_net:
      # this is the module to create the VPC networks. variables always use the double {{}} syntax to reference them
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_net_module.html

        name: "{{vpc_name}}"
        # vpc_name is from the vpc_setup vars file
        cidr_block: "{{vpcCidr}}"
        region: "{{region}}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state: "{{state}}"

      register: vpcoutvariable
      # this registers this module's contents as variable vpcoutvariable so that we can reference it in other modules


    - debug:
        var: vpcoutvariable
        # this debug module task will output the module's contents to the terminal 


    - name: Create PublicSubnet 1 in Zone 1
      ec2_vpc_subnet:
      # this module is used to create subnets in the VPC
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_subnet_module.html
        vpc_id: "{{vpcoutvariable.vpc.id}}"
        # reference to the above module
        region: "{{region}}"
        az: "{{zone1}}"
        # zone is not supported. It is called az for availability zone now.
        state: "{{state}}"
        cidr: "{{PubSub1Cidr}}"
        # all of these variables are assigned values in var/vpc_setup
        map_public: yes
        # map_public will map a public ip address to the subnet.  For public we need this for routing out to the internet
        resource_tags: 
          Name: vprofile-pubsub1

      register: pubsub1_out_variable


    - debug:
        var: pubsub1_out_variable
        # this debug module task will output the public subnet1 module's contents to the terminal 


    - name: Create PublicSubnet 2 in Zone 2
      ec2_vpc_subnet:
      # this module is used to create subnets in the VPC
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_subnet_module.html
        vpc_id: "{{vpcoutvariable.vpc.id}}"
        # reference to the above module
        region: "{{region}}"
        az: "{{zone2}}"
        # zone is not supported. It is called az for availability zone now.
        state: "{{state}}"
        cidr: "{{PubSub2Cidr}}"
        # all of these variables are assigned values in var/vpc_setup
        map_public: yes
        # map_public will map a public ip address to the subnet.  For public we need this for routing out to the internet
        resource_tags: 
          Name: vprofile-pubsub2

      register: pubsub2_out_variable


    - name: Create PublicSubnet 3 in Zone 3
      ec2_vpc_subnet:
      # this module is used to create subnets in the VPC
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_subnet_module.html
        vpc_id: "{{vpcoutvariable.vpc.id}}"
        # reference to the above module
        region: "{{region}}"
        az: "{{zone3}}"
        # zone is not supported. It is called az for availability zone now.
        state: "{{state}}"
        cidr: "{{PubSub3Cidr}}"
        # all of these variables are assigned values in var/vpc_setup
        map_public: yes
        # map_public will map a public ip address to the subnet.  For public we need this for routing out to the internet
        resource_tags: 
          Name: vprofile-pubsub3

      register: pubsub3_out_variable


    - name: Create PrivateSubnet 1 in Zone 1
      ec2_vpc_subnet:
      # this module is used to create subnets in the VPC
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_subnet_module.html
        vpc_id: "{{vpcoutvariable.vpc.id}}"
        # reference to the above module
        region: "{{region}}"
        az: "{{zone1}}"
        # zone is not supported. It is called az for availability zone now.
        state: "{{state}}"
        cidr: "{{PrivSub1Cidr}}"
        # all of these variables are assigned values in var/vpc_setup
        #map_public: yes
        # map_public will map a public ip address to the subnet.  For public we need this for routing out to the internet
        resource_tags: 
          Name: vprofile-privsub1

      register: privsub1_out_variable


    - name: Create PrivateSubnet 2 in Zone 2
      ec2_vpc_subnet:
      # this module is used to create subnets in the VPC
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_subnet_module.html
        vpc_id: "{{vpcoutvariable.vpc.id}}"
        # reference to the above module
        region: "{{region}}"
        az: "{{zone2}}"
        # zone is not supported. It is called az for availability zone now.
        state: "{{state}}"
        cidr: "{{PrivSub2Cidr}}"
        # all of these variables are assigned values in var/vpc_setup
        #map_public: yes
        # map_public will map a public ip address to the subnet.  For public we need this for routing out to the internet
        resource_tags: 
          Name: vprofile-privsub2

      register: privsub2_out_variable


    - name: Create PrivateSubnet 3 in Zone 3
      ec2_vpc_subnet:
      # this module is used to create subnets in the VPC
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_subnet_module.html
        vpc_id: "{{vpcoutvariable.vpc.id}}"
        # reference to the above module
        region: "{{region}}"
        az: "{{zone3}}"
        # zone is not supported. It is called az for availability zone now.
        state: "{{state}}"
        cidr: "{{PrivSub3Cidr}}"
        # all of these variables are assigned values in var/vpc_setup
        #map_public: yes
        # map_public will map a public ip address to the subnet.  For public we need this for routing out to the internet
        resource_tags: 
          Name: vprofile-privsub3

      register: privsub3_out_variable


    - name: Create Internet Gateway Setup for public subnets
      ec2_vpc_igw:
      # this module creates the IGW for the pubic subnets so that they can route out via the route table.
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_igw_module.html#ansible-collections-amazon-aws-ec2-vpc-igw-module
        vpc_id: "{{vpcoutvariable.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        resource_tags:
          Name: vprofile_IGW

      register: igw_out_variable        
    

    - debug:
        var: igw_out_variable
        # this debug module task will output the igw module's contents to the terminal 


    - name: Set up the public subnet route table to point to IGW above for default route
      ec2_vpc_route_table:
      # this module creates the route table so that the public subnet can route out via the IGW for all default routes
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_route_table_module.html#ansible-collections-amazon-aws-ec2-vpc-route-table-module
        vpc_id: "{{vpcoutvariable.vpc.id}}"
        region: "{{region}}"
        resource_tags:
          Name: vprofile_Publicroutingtable
        subnets:
        # this is an array of subnets.
          - "{{pubsub1_out_variable.subnet.id}}"
          - "{{pubsub2_out_variable.subnet.id}}"
          - "{{pubsub3_out_variable.subnet.id}}"
        routes:
        # this is a list of routes.
          - dest: 0.0.0.0/0
            gateway_id: "{{igw_out_variable.gateway_id}}"

      register: publicroutingtable_out_variable


    - debug:
        var: publicroutingtable_out_variable
        # this debug module task will output the public routing table module's contents to the terminal 


    - name: Create a new NAT Gateway and allocate a new EIP(Elastic IP) if a nat gateway does not yet exist in the subnet
      ec2_vpc_nat_gateway:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_nat_gateway_module.html#ansible-collections-amazon-aws-ec2-vpc-nat-gateway-module
        state: "{{state}}"
        subnet_id: "{{pubsub1_out_variable.subnet.id}}"
        # The id of the subnet to create the NAT Gateway in. We have 3 private subnets. In reality there would be 3 NAT GW for high availablity
        # but this is very expensive. For this project we will use just one and all the traffic will have to NAT out this GW.
        wait: yes
        # Wait for operation to complete before returning.
        region: "{{region}}"
        resource_tags:
          Name: vprofile_NATGW
        if_exist_do_not_create: true
        # if a NAT Gateway exists already in the subnet_id, then do not create a new one.  Otherwise it will create a NAT GW each time the playbook is executed.

      register: NATGW_out_variable


    - debug:
        var: NATGW_out_variable
        # this debug module task will output the NATGW module's contents to the terminal 


    - name: Set up the Private subnet route table (explicit)  (Right now there is a default but not explicit)
      ec2_vpc_route_table:
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_route_table_module.html#ansible-collections-amazon-aws-ec2-vpc-route-table-module
      # Similar to the public route table but this will be for private subets and will use the NAT GW above to NAT and route the traffic out via the public subnet and IGW
       vpc_id: "{{vpcoutvariable.vpc.id}}"
       region: "{{region}}"
       resource_tags:
         Name: vprofile_Privateroutingtable
       subnets:
       # this is an array of subnets.
         - "{{privsub1_out_variable.subnet.id}}"
         - "{{privsub2_out_variable.subnet.id}}"
         - "{{privsub3_out_variable.subnet.id}}"
       routes:
       # this is a list of routes.
         - dest: 0.0.0.0/0
           #gateway_id: "{{NATGW_out_variable.nat_gateway.id}}"
           gateway_id: "{{NATGW_out_variable.nat_gateway_id}}"

      register: privateroutingtable_out_variable   


    - debug:
        var: privateroutingtable_out_variable
        # this debug module task will output the Private subnet routing table module's contents to the terminal 


